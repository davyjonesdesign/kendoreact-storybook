"use strict";(self.webpackChunkkendoreact_storybook=self.webpackChunkkendoreact_storybook||[]).push([[4567],{"./src/stories/ConversationalUI.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ConversationalUI_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),objectDestructuringEmpty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"),Chat=__webpack_require__("./node_modules/@progress/kendo-react-conversational-ui/dist/es/components/Chat.js"),jsx_runtime=(__webpack_require__("./src/stories/assets/index.scss"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const ConversationalUI=_ref=>{let props=Object.assign({},((0,objectDestructuringEmpty.A)(_ref),_ref));const bot={id:0},initialMessages=[{author:bot,suggestedActions:[{type:"reply",value:"Neat!"}],timestamp:new Date,text:"Hello, this is a demo bot. I don't do much, but I can count symbols!"}],[messages,setMessages]=react.useState(initialMessages),countReplayLength=question=>question+" contains exactly "+question.length+" symbols.";return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(Chat.r,(0,objectSpread2.A)((0,objectSpread2.A)({},props),{},{user:{id:1},messages,onMessageSend:event=>{let botResponse=Object.assign({},event.message);botResponse.text=countReplayLength(event.message.text),botResponse.author=bot,setMessages([...messages,event.message]),setTimeout((()=>{setMessages((oldMessages=>[...oldMessages,botResponse]))}),1e3)},placeholder:"Type a message...",width:400}))})};ConversationalUI.defaultProps={},ConversationalUI.__docgenInfo={description:"",methods:[],displayName:"ConversationalUI",props:{attachmentTemplate:{description:"",type:{name:"any"},required:!1},className:{description:"",type:{name:"string"},required:!1},dir:{description:"",type:{name:"enum",value:[{value:"'ltr'",computed:!1},{value:"'rtl'",computed:!1},{value:"'auto'",computed:!1}]},required:!1},message:{description:"",type:{name:"element"},required:!1},messageBox:{description:"",type:{name:"element"},required:!1},messages:{description:"",type:{name:"any"},required:!1},messageTemplate:{description:"",type:{name:"element"},required:!1},placeholder:{description:"",type:{name:"string"},required:!1},showToolbar:{description:"",type:{name:"any"},required:!1},toolbar:{description:"",type:{name:"any"},required:!1},user:{description:"",type:{name:"any"},required:!1},width:{description:"",type:{name:"string"},required:!1}}};const ConversationalUI_stories={title:"Conversational UI/Conversational UI",component:ConversationalUI,argTypes:{}},Primary=(args=>(0,jsx_runtime.jsx)(ConversationalUI,(0,objectSpread2.A)({},args))).bind({});Primary.args={},Primary.storyName="Conversational UI";const __namedExportsOrder=["Primary"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"args => <ConversationalUI {...args} />",...Primary.parameters?.docs?.source}}}},"./src/stories/assets/index.scss":()=>{}}]);